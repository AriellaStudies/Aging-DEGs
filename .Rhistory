new_dict[item] += 1
simpleGCD2[key] = new_dict
simpleGCD_df = pd.DataFrame.from_dict(simpleGCD2,orient='index')
simpleGCD_df
pd.DataFrame.to_csv(simpleGCD_df,"simpleGCD.csv")
View(gene_complex_dictionary)
library(reticulate)
py_run_string("
def print_gene_info(gene_dict, gene_list):
for gene in gene_list:
if gene in gene_dict:
print(f'Information for {gene}:')
print('Dataset IDs:', gene_dict[gene]['index'])
print('Tissue Types:', gene_dict[gene]['tissue'])
print('Animal Types:', gene_dict[gene]['animal'])
print('----------')
else:
print(f'No information available for {gene}')
genes_of_interest = ['SPARC', 'CDC20', 'RSRC1', 'CA4', 'CASP1', 'DIRC2']
print_gene_info(gene_complex_dictionary, genes_of_interest)
")
simpleGCD = {}
for key in gene_complex_dictionary:
simpleGCD[key] = gene_complex_dictionary[key]['tissue']
simpleGCD2 = {}
for key in simpleGCD:
new_dict = {
'Trachea':0,'Reproduction':0,'Muscle':0,'Liver':0,'Immune':0,'Heart':0,'Fat':0,'Cochlea':0,'Brain':0
}
for item in simpleGCD[key]:
new_dict[item] += 1
simpleGCD2[key] = new_dict
simpleGCD_df = pd.DataFrame.from_dict(simpleGCD2,orient='index')
simpleGCD_df
pd.DataFrame.to_csv(simpleGCD_df,"simpleGCD.csv")
ax = sns.heatmap(simpleGCD_df, cmap="YlGnBu", xticklabels=True, yticklabels=True)
ax.figure.tight_layout()
ax
simpleGCD_df_alpha = pd.DataFrame.sort_index(simpleGCD_df)
plt.figure(figsize = (6,8),dpi=600)
ax = sns.heatmap(simpleGCD_df_alpha, cmap="YlGnBu", xticklabels=True, yticklabels=True)
ax.figure.tight_layout()
plt.savefig('heatmaptest.svg')
ax
import pandas as pd
import regex as re
import seaborn as sns
import matplotlib.pyplot as plt
print("Pandas version:", pd.__version__)
print("Seaborn version:", sns.__version__)
ax = sns.heatmap(simpleGCD_df, cmap="YlGnBu", xticklabels=True, yticklabels=True)
ax.figure.tight_layout()
ax
simpleGCD_df_alpha = pd.DataFrame.sort_index(simpleGCD_df)
plt.figure(figsize = (6,8),dpi=600)
ax = sns.heatmap(simpleGCD_df_alpha, cmap="YlGnBu", xticklabels=True, yticklabels=True)
ax.figure.tight_layout()
plt.savefig('heatmaptest.svg')
ax
simpleGCD_df_alpha = pd.DataFrame.sort_index(simpleGCD_df)
plt.figure(figsize = (6,8),dpi=600)
ax = sns.heatmap(simpleGCD_df_alpha, cmap="YlGnBu", xticklabels=True, yticklabels=True)
ax.figure.tight_layout()
plt.savefig('heatmaptest.svg')
ax
plt.show()
ax = sns.heatmap(simpleGCD_df, cmap="YlGnBu", xticklabels=True, yticklabels=True)
ax.figure.tight_layout()
ax
plt.show()
# List of genes of interest
genes_of_interest = ['SPARC', 'CDC20', 'RSRC1', 'CA4', 'CASP1', 'DIRC2']
# Assuming 'simpleGCD_df' is your DataFrame and gene names are the index
# Filter the DataFrame to include only your genes of interest
filtered_df = simpleGCD_df.loc[genes_of_interest]
# Sort the DataFrame by index in case the gene order is important
filtered_df_alpha = filtered_df.sort_index()
# Create the heatmap
plt.figure(figsize=(6, 8), dpi=600)
ax = sns.heatmap(filtered_df_alpha, cmap="YlGnBu", xticklabels=True, yticklabels=True)
# Use tight_layout to adjust subplot params
ax.figure.tight_layout()
# Save the figure if needed
plt.savefig('heatmap_specific_genes.svg')
# Display the plot
plt.show()
View(simpleGCD2)
def enhanced_file_to_dict(file_name, young_dict_ext, old_dict_ext, total_dict_ext):
try:
file = open(file_name)
header = file.readline()
for line in file:
row = line.strip().replace('"', '').split('\t')
logFC = float(row[5])
geneID = row[6]
dataset_id = file_name  # Assuming file_name effectively represents the dataset ID
# Update the young dictionary for overexpression
if logFC > 0:
if geneID not in young_dict_ext:
young_dict_ext[geneID] = {'count': 0, 'datasets': []}
young_dict_ext[geneID]['count'] += 1
young_dict_ext[geneID]['datasets'].append(dataset_id)
# Update the old dictionary for underexpression
if logFC < 0:
if geneID not in old_dict_ext:
old_dict_ext[geneID] = {'count': 0, 'datasets': []}
old_dict_ext[geneID]['count'] += 1
old_dict_ext[geneID]['datasets'].append(dataset_id)
# Update the total dictionary for total counts
if geneID not in total_dict_ext:
total_dict_ext[geneID] = {'count': 0, 'datasets': []}
total_dict_ext[geneID]['count'] += 1
total_dict_ext[geneID]['datasets'].append(dataset_id)
file.close()
except Exception as e:
print(f"Error processing file {file_name}: {str(e)}")
# New dictionaries to store extended information
young_dict_ext = {}
old_dict_ext = {}
total_dict_ext = {}
# New dictionaries to store extended information
young_dict_ext = {}
old_dict_ext = {}
total_dict_ext = {}
#Human
enhanced_file_to_dict('tT007.txt')
enhanced_file_to_dict('tT009.txt')
enhanced_file_to_dict('tT023.txt')
enhanced_file_to_dict('tT036.txt')
enhanced_file_to_dict('tT037.txt')
enhanced_file_to_dict('tT038.txt')
enhanced_file_to_dict('tT044.txt')
#Mouse
enhanced_file_to_dict('tT000.txt')
enhanced_file_to_dict('tT008.txt')
enhanced_file_to_dict('tT011.txt')
enhanced_file_to_dict('tT014.txt')
enhanced_file_to_dict('tT020.txt')
enhanced_file_to_dict('tT043a.txt')
enhanced_file_to_dict('tT043b.txt')
enhanced_file_to_dict('tT057.txt')
#enhanced_file_to_dict('tT081.txt') excluded as a repeat
enhanced_file_to_dict('tT082.txt')
enhanced_file_to_dict('tT097.txt')
enhanced_file_to_dict('tT112.txt')
enhanced_file_to_dict('tT113.txt')
enhanced_file_to_dict('tT133.txt')
#Other:
enhanced_file_to_dict('tT058.txt')
enhanced_file_to_dict('tT088.txt')
enhanced_file_to_dict('tT092.txt')
enhanced_file_to_dict('tT108a.txt')
enhanced_file_to_dict('tT108b.txt')
enhanced_file_to_dict('tT132.txt')
# New dictionaries to store extended information
young_dict_ext = {}
old_dict_ext = {}
total_dict_ext = {}
# List of file names if they are not sequentially named
file_list = ['tT007.txt', 'tT009.txt', 'tT023.txt', 'tT036.txt', 'tT037.txt', 'tT038.txt', 'tT044.txt',
'tT000.txt', 'tT008.txt', 'tT011.txt', 'tT014.txt', 'tT020.txt', 'tT043a.txt', 'tT043b.txt',
'tT057.txt', 'tT082.txt', 'tT097.txt', 'tT112.txt', 'tT113.txt', 'tT133.txt',
'tT058.txt', 'tT088.txt', 'tT092.txt', 'tT108a.txt', 'tT108b.txt', 'tT132.txt']
for file_name in file_list:
enhanced_file_to_dict(file_name, young_dict_ext, old_dict_ext, total_dict_ext)
View(young_dict_ext)
View(total_dict_ext)
View(total_dict_ext)
View(total_dict)
View(total_dict)
# Create two lists to hold data for DataFrame creation
upregulated_data = []
downregulated_data = []
# Iterate through the dictionaries to build the data lists
for gene, details in young_dict_ext.items():
for dataset in details['datasets']:
index = indices.index(dataset)  # Get the index for referencing tissues and animals
upregulated_data.append({
'Gene': gene,
'Dataset': dataset,
'Tissue': tissues[index],
'Animal': animals[index]
})
for gene, details in old_dict_ext.items():
for dataset in details['datasets']:
index = indices.index(dataset)  # Get the index for referencing tissues and animals
downregulated_data.append({
'Gene': gene,
'Dataset': dataset,
'Tissue': tissues[index],
'Animal': animals[index]
})
# Create DataFrames
upregulated_df = pd.DataFrame(upregulated_data)
downregulated_df = pd.DataFrame(downregulated_data)
# Sort DataFrames for better visualization
upregulated_df.sort_values(by=['Gene', 'Dataset'], inplace=True)
downregulated_df.sort_values(by=['Gene', 'Dataset'], inplace=True)
# Create two lists to hold data for DataFrame creation
upregulated_data = []
downregulated_data = []
# Iterate through the dictionaries to build the data lists
for gene, details in young_dict_ext.items():
for dataset in details['datasets']:
index = indices.index(dataset)  # Get the index for referencing tissues and animals
print(indices[:10])  # Print the first 10 entries to check the filename format
def populate_gene_complex_details_new(file_name, indices, tissues, animals, young_dict_ext, old_dict_ext):
gene_complex_dictionary_new = {}  # Initialize a new dictionary
# Normalize the file_index based on your specific rules
file_index = file_name.strip("tT").strip(".txt")
if file_index == '043a':
file_index = 43
elif file_index == '043b':
file_index = 44
elif file_index == '108a':
file_index = 109
elif file_index == '108b':
file_index = 110
else:
file_index = int(file_index)
if file_index > 108:
file_index += 2  # Adjust indices after 108
elif 43 < file_index < 108:
file_index += 1  # Adjust indices after 43 and before 108
# Use the adjusted file_index to access indices, tissues, and animals
try:
file = open(file_name)
header = file.readline()
geneIDs = []
for line in file:
row = line.strip().replace('"', '').split('\t')
geneID = row[6]
geneIDs.append(geneID)
file.close()
# Use geneIDs to populate the new dictionary with detailed dataset characteristics
for gene in geneIDs:
if gene in young_dict_ext and file_name in young_dict_ext[gene]['datasets']:  # Check if this gene is listed as upregulated in this dataset
if gene not in gene_complex_dictionary_new:
gene_complex_dictionary_new[gene] = {'upregulated_datasets': [], 'downregulated_datasets': []}
gene_complex_dictionary_new[gene]['upregulated_datasets'].append({
'index': indices[file_index],
'tissue': tissues[file_index],
'animal': animals[file_index]
})
if gene in old_dict_ext and file_name in old_dict_ext[gene]['datasets']:  # Check if this gene is listed as downregulated in this dataset
if gene not in gene_complex_dictionary_new:
gene_complex_dictionary_new[gene] = {'upregulated_datasets': [], 'downregulated_datasets': []}
gene_complex_dictionary_new[gene]['downregulated_datasets'].append({
'index': indices[file_index],
'tissue': tissues[file_index],
'animal': animals[file_index]
})
except Exception as e:
print(f"Error processing file {file_name}: {str(e)}")
return gene_complex_dictionary_new  # Return the newly populated dictionary
# List of all dataset files
file_list = ['tT007.txt', 'tT009.txt', 'tT023.txt', 'tT036.txt', 'tT037.txt', 'tT038.txt', 'tT044.txt',
'tT000.txt', 'tT008.txt', 'tT011.txt', 'tT014.txt', 'tT020.txt', 'tT043a.txt', 'tT043b.txt',
'tT057.txt', 'tT082.txt', 'tT097.txt', 'tT112.txt', 'tT113.txt', 'tT133.txt',
'tT058.txt', 'tT088.txt', 'tT092.txt', 'tT108a.txt', 'tT108b.txt', 'tT132.txt']
# Initialize the main dictionary to accumulate all results
accumulated_gene_details = {}
# Loop through each file in the list
for file_name in file_list:
# Execute the function and get the dictionary for the current file
current_gene_details = populate_gene_complex_details_new(file_name, indices, tissues, animals, young_dict_ext, old_dict_ext)
# Merge the current dictionary with the accumulated dictionary
for gene, details in current_gene_details.items():
if gene not in accumulated_gene_details:
accumulated_gene_details[gene] = details
else:
# Combine the lists of datasets, tissues, and animals
accumulated_gene_details[gene]['upregulated_datasets'].extend(details['upregulated_datasets'])
accumulated_gene_details[gene]['downregulated_datasets'].extend(details['downregulated_datasets'])
# Now 'accumulated_gene_details' contains combined details from all files
View(accumulated_gene_details)
# Print details for the first few genes in the dictionary
for gene, details in list(accumulated_gene_details.items())[:5]:  # Adjust the number to print more or fewer genes
print(f"Gene: {gene}")
print("Upregulated in Datasets:")
for dataset in details['upregulated_datasets']:
print(f"  - Index: {dataset['index']}, Tissue: {dataset['tissue']}, Animal: {dataset['animal']}")
print("Downregulated in Datasets:")
for dataset in details['downregulated_datasets']:
print(f"  - Index: {dataset['index']}, Tissue: {dataset['tissue']}, Animal: {dataset['animal']}")
print("\n")  # Adds a newline for better separation between entries
# List of your specific genes of interest
genes_of_interest = ['SPARC', 'DIRC2', 'CA4', 'CDC20', 'RSRC1', 'CASP1']
# Print details for each of the specified genes
for gene in genes_of_interest:
if gene in accumulated_gene_details:
details = accumulated_gene_details[gene]
print(f"Gene: {gene}")
print("Upregulated in Datasets:")
for dataset in details['upregulated_datasets']:
print(f"  - Index: {dataset['index']}, Tissue: {dataset['tissue']}, Animal: {dataset['animal']}")
print("Downregulated in Datasets:")
for dataset in details['downregulated_datasets']:
print(f"  - Index: {dataset['index']}, Tissue: {dataset['tissue']}, Animal: {dataset['animal']}")
print("\n")  # Adds a newline for better separation between entries
else:
print(f"Gene: {gene} - No data available")
# List of your specific genes of interest
genes_of_interest = ['SPARC', 'DIRC2', 'CA4', 'CDC20', 'RSRC1', 'CASP1']
# Initialize a dictionary to hold the data
heatmap_data = {gene: {'upregulated': {}, 'downregulated': {}} for gene in genes_of_interest}
# Populate the dictionary with data from accumulated_gene_details
for gene in genes_of_interest:
if gene in accumulated_gene_details:
for dataset in accumulated_gene_details[gene]['upregulated_datasets']:
tissue = dataset['tissue']
if tissue not in heatmap_data[gene]['upregulated']:
heatmap_data[gene]['upregulated'][tissue] = 0
heatmap_data[gene]['upregulated'][tissue] += 1
for dataset in accumulated_gene_details[gene]['downregulated_datasets']:
tissue = dataset['tissue']
if tissue not in heatmap_data[gene]['downregulated']:
heatmap_data[gene]['downregulated'][tissue] = 0
heatmap_data[gene]['downregulated'][tissue] += 1
# Convert the dictionary to a DataFrame for easier manipulation and visualization
df_upregulated = pd.DataFrame({gene: heatmap_data[gene]['upregulated'] for gene in genes_of_interest}).fillna(0)
df_downregulated = pd.DataFrame({gene: heatmap_data[gene]['downregulated'] for gene in genes_of_interest}).fillna(0)
# Combine upregulated and downregulated counts in a single DataFrame
# Assign positive values for upregulated and negative values for downregulated
for gene in genes_of_interest:
df_upregulated[gene] *= 1   # Optional: Use actual counts if needed
df_downregulated[gene] *= -1
heatmap_df = df_upregulated + df_downregulated
plt.figure(figsize=(10, 6))
ax = sns.heatmap(heatmap_df, cmap="coolwarm", annot=True, fmt=".0f", linewidths=.5)
plt.title('Gene Expression Over/Under Regulation by Tissue')
plt.xlabel('Genes')
plt.ylabel('Tissues')
plt.show()
# Assuming heatmap_df is already created and filled with the correct data
# Flip the sign of the upregulated and downregulated data to align with new conventions
heatmap_df = -1 * heatmap_df
# Eliminate rows with all zeros (completely empty tissues)
heatmap_df = heatmap_df.loc[(heatmap_df != 0).any(axis=1)]
# Create the heatmap
plt.figure(figsize=(12, 8))
cmap = sns.diverging_palette(220, 20, as_cmap=True, center="light")  # Using a diverging palette, set zero to a neutral color
ax = sns.heatmap(heatmap_df, cmap=cmap, annot=True, fmt=".0f", center=0, linewidths=.5, linecolor='grey')
plt.title('Gene Expression Over/Under Regulation by Tissue (Corrected)')
plt.xlabel('Genes')
plt.ylabel('Tissues')
plt.show()
# Assuming heatmap_df is already created and filled with the correct data
# Create the heatmap with adjusted label orientation and margin
plt.figure(figsize=(12, 8))  # Adjust figure size as needed
cmap = sns.diverging_palette(220, 20, as_cmap=True, center="light")  # Using a diverging palette, set zero to a neutral color
ax = sns.heatmap(heatmap_df, cmap=cmap, annot=True, fmt=".0f", center=0, linewidths=.5, linecolor='grey')
# Rotate y-axis labels to horizontal
plt.yticks(rotation=0)  # Rotate y-axis labels to be horizontal
# Increase the left margin
plt.subplots_adjust(left=0.3)  # Adjust this value as needed to give more space for tissue names
plt.title('Gene Expression Over/Under Regulation by Tissue (Corrected)')
plt.xlabel('Genes')
plt.ylabel('Tissues')
plt.show()
# Assuming heatmap_df is the DataFrame that combines the upregulated and downregulated counts
# Fill NaN values with 0 to ensure that empty entries are treated as zeros
heatmap_df = heatmap_df.fillna(0)
# Remove rows where all values are zero (after ensuring all NaNs are replaced by zeros)
heatmap_df = heatmap_df.loc[(heatmap_df != 0).any(axis=1)]
# Proceed to create the heatmap
plt.figure(figsize=(12, 8))
cmap = sns.diverging_palette(220, 20, as_cmap=True, center="light")  # Using a diverging palette, set zero to a neutral color
ax = sns.heatmap(heatmap_df, cmap=cmap, annot=True, fmt=".0f", center=0, linewidths=.5, linecolor='grey')
plt.yticks(rotation=0)  # Rotate y-axis labels to be horizontal
plt.subplots_adjust(left=0.3)  # Adjust this value as needed to give more space for tissue names
plt.title('Gene Expression Over/Under Regulation by Tissue (Corrected)')
plt.xlabel('Genes')
plt.ylabel('Tissues')
plt.show()
# Assuming heatmap_df is the DataFrame that combines the upregulated and downregulated counts
# Fill NaN values with 0 to ensure that empty entries are treated as zeros
heatmap_df = heatmap_df.fillna(0)
# Remove rows where all values are zero (after ensuring all NaNs are replaced by zeros)
heatmap_df = heatmap_df.loc[(heatmap_df != 0).any(axis=1)]
# Proceed to create the heatmap without annotations
plt.figure(figsize=(12, 8))
cmap = sns.diverging_palette(220, 20, as_cmap=True, center="light")  # Using a diverging palette, set zero to a neutral color
ax = sns.heatmap(heatmap_df, cmap=cmap, annot=False, center=0, linewidths=.5, linecolor='grey')  # `annot=False` removes the numbers
plt.yticks(rotation=0)  # Rotate y-axis labels to be horizontal
plt.subplots_adjust(left=0.3)  # Adjust this value as needed to give more space for tissue names
plt.title('Gene Expression Over/Under Regulation by Tissue (Corrected)')
plt.xlabel('Genes')
plt.ylabel('Tissues')
plt.show()
quit
TotalCounts_byGene <- read.csv("Total_Counts.csv")
colnames(TotalCounts_byGene)<-c("Gene","Total_Count")
TotalCounts_numbers <- TotalCounts_byGene[,2]
#adjust HERE to change the score limit moving forward
score_limit = 6
TC2 <- TotalCounts_byGene[which(TotalCounts_byGene$Total_Count > score_limit | TotalCounts_byGene$Total_Count < -(score_limit)),]
YoungCounts_byGene <- read.csv("Young_Counts.csv")
YoungCounts_numbers <- YoungCounts_byGene[,2]
colnames(YoungCounts_byGene)<-c("Gene","Young_Count")
#adjust HERE to change histogram left limit (1 of 2):
YC2 <- YoungCounts_byGene[which(YoungCounts_byGene$Young_Count > score_limit),]
YC2L <- YC2[,2]
OldCounts_byGene <- read.csv("Old_Counts.csv")
OldCounts_numbers <- OldCounts_byGene[,2]
colnames(OldCounts_byGene)<-c("Gene","Old_Count")
#adjust HERE to change histogram left limit (2 of 2):
OC2 <- OldCounts_byGene[which(OldCounts_byGene$Old_Count > score_limit),]
OC2L <- OC2[,2]
YC2$Type <- "Young"
OC2$Type <- "Old"
colnames(YC2) <- c("Gene", "Count", "Type")
colnames(OC2) <- c("Gene", "Count", "Type")
HistoCounts <- rbind(YC2, OC2)
ggplot(HistoCounts, aes(Count, fill = Type)) +
geom_histogram(alpha = 0.5, color = "black", binwidth = 1, position = "identity") +
theme_minimal() +
scale_x_continuous(name = "Score", breaks = 3:15, minor_breaks = NULL) +
scale_y_continuous(name = "# DEGs Achieving Score", minor_breaks = 1:100)
ggsave(file="histoscorestest.svg")
ggplot
DS <- read.csv("221_Datasets.csv")
DS[44,1]<-"43a"
DS[45,1]<-"43b"
DS[110,1]<-"108a"
DS[111,1]<-"108b"
DSS_Function <- function(dataset_df,index_char){
new_DEG_count<-length(dataset_df[,1])
DS[which(DS$Index==index_char),9]<-new_DEG_count
DSS_Output <- DS
return(DSS_Output)
}
#Human:
DS<-DSS_Function(tT007,"7")
DS<-DSS_Function(tT009,"9")
DS<-DSS_Function(tT023,"23")
DS<-DSS_Function(tT036,"36")
DS<-DSS_Function(tT037,"37")
DS<-DSS_Function(tT038,"38")
DS<-DSS_Function(tT044,"44")
#Mouse:
DS<-DSS_Function(tT000,"0")
DS<-DSS_Function(tT008,"8")
DS<-DSS_Function(tT011,"11")
DS<-DSS_Function(tT014,"14")
DS<-DSS_Function(tT020,"20")
DS<-DSS_Function(tT043a,"43a")
DS<-DSS_Function(tT043b,"43b")
DS<-DSS_Function(tT057,"57")
#DS<-DSS_Function(tT081,"81") excluded as repeat
DS<-DSS_Function(tT082,"82")
DS<-DSS_Function(tT097,"97")
DS<-DSS_Function(tT112,"112")
DS<-DSS_Function(tT113,"113")
DS<-DSS_Function(tT133,"133")
#Other:
DS<-DSS_Function(tT058,"58")
DS<-DSS_Function(tT088,"88")
DS<-DSS_Function(tT092,"92")
DS<-DSS_Function(tT108a,"108a")
DS<-DSS_Function(tT108b,"108b")
DS<-DSS_Function(tT132,"132")
boxplot(DS$DEGs, horizontal=TRUE, main="Number of DEGs per Dataset")
text(x=fivenum(DS$DEGs), labels =fivenum(DS$DEGs), y=1.25)
#Note the middle value is median (50th percentile), not mean.
#Lower hinge is 25th percentile, upper is 75th percentile
DS_Progress = DS[which(DS$DEGs >0),]
length(DS_Progress$DEGs)
write.csv(DS_Progress,"DatasetsToDate.csv")
agg <- count(DS_Progress,Tissue,Organism)
ggplot(agg) +
geom_col(aes(x = Tissue, y = n, fill = Organism)) +
theme_minimal()+
theme(axis.text.x = element_text(angle = 70, hjust=1))+
scale_y_continuous(breaks = 1:10, minor_breaks = NULL)+
coord_flip()
ggsave(file="datasetstats.svg")
DS_Progress %>%
group_by(Tissue) %>%
summarise(sum_DEGs = sum(DEGs), mean_DEGs = mean(DEGs))
DS_Progress %>%
group_by(Tissue) %>%
summarise(Sum_DEGs = sum(DEGs), mean_DEGs = mean(DEGs)) %>%
ggplot(aes(x=Tissue, y = Sum_DEGs, fill = Tissue)) +
geom_bar(stat="identity")+
theme_minimal()+
theme(axis.text.x = element_text(angle = 90, hjust=1))+
xlab("")+
guides(fill=FALSE)+
coord_flip()
ggplot(DS_Progress, aes(x=Tissue,y=DEGs, fill=Organism))+
geom_dotplot(binaxis = 'y',stackdir = 'center',dotsize=1.5)+
theme_minimal()+
theme(axis.text.x = element_text(angle = 90, hjust=1))+
coord_flip()
OrthoList <- read.csv("ortholist_master.csv")
OrthoDEGs <- merge(TotalCounts_byGene,OrthoList,by.x = "Gene", by.y = "HGNC.Symbol", all.x = TRUE)
subset_by_counts <- OrthoDEGs[which(OrthoDEGs$Total_Count > score_limit | OrthoDEGs$Total_Count < -score_limit),]
DEG_Orthologs <- subset_by_counts[,c("Gene","Total_Count","Locus.ID","Common.Name","No..of.Programs","Ahringer.RNAi.Clone.Location")]
colnames(DEG_Orthologs) <- c("Human.Gene","DE.Score","Worm.Gene","Name","Programs","RNAi")
DEG_Orthologs
write.csv(DEG_Orthologs,"DEG_Orthologs.csv")
no.hum<-length(TC2$Gene)
cat("Number of human genes queried:",no.hum)
no.notworm <- sum(is.na(DEG_Orthologs$Worm.Gene))
cat("\nNumber without orthologs:",no.notworm)
no.worm <- no.hum - no.notworm
percent.worm <- no.worm/no.hum
cat("\nFraction with orthologs:",percent.worm)
pie_slices <- c(no.notworm,no.worm)
pie_labels <- c("No_Ortholog","Has_Ortholog")
pie(pie_slices,labels=pie_labels)
