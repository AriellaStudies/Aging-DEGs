tT <- topTable(fit2, adjust="fdr", sort.by="B", number=outputs)
tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","t","B","logFC","Gene.symbol","Gene.title"))
return(tT)
}
GEO2R_pFiltered <- function(GSE_number,platform_code,group_binaries,outputs){
tempTable <- GEO2R(GSE_number,platform_code,group_binaries,outputs)
filtTable <- tempTable[tempTable$adj.P.Val<0.05,]
dupTable <- filtTable[!duplicated(filtTable$Gene.symbol),]
return(dupTable)
}
tT153M <- GEO2R_pFiltered("GSE4332","GPL1261","11111000",1000)
tT153M <- GEO2R("GSE4332","GPL1261","11111000",1000)
View(tT153M)
tT153M <- GEO2R("GSE4332","GPL1261","11111000",250)
View(tT153M)
knitr::opts_chunk$set(echo = TRUE)
gset <- getGEO("GSE4332", GSEMatrix =TRUE, AnnotGPL=TRUE)
if (length(gset) > 1) idx <- grep("GPL1261", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
# group membership for all samples
gsms <- "11111000"
sml <- strsplit(gsms, split="")[[1]]
# log2 transformation
ex <- exprs(gset)
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0)
if (LogC) { ex[which(ex <= 0)] <- NaN
exprs(gset) <- log2(ex) }
# assign samples to groups and set up design matrix
gs <- factor(sml)
groups <- make.names(c("young","old"))
levels(gs) <- groups
gset$group <- gs
design <- model.matrix(~group + 0, gset)
colnames(design) <- levels(gs)
fit <- lmFit(gset, design)  # fit linear model
# set up contrasts of interest and recalculate model coefficients
cts <- paste(groups[1], groups[2], sep="-")
cont.matrix <- makeContrasts(contrasts=cts, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
# compute statistics and table of top significant genes
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="fdr", sort.by="B", number=250)
tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","t","B","logFC","Gene.symbol","Gene.title"))
tT
gset <- getGEO("GSE4332", GSEMatrix =TRUE, AnnotGPL=TRUE)
if (length(gset) > 1) idx <- grep("GPL1261", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
# group membership for all samples
gsms <- "11111000"
sml <- strsplit(gsms, split="")[[1]]
# log2 transformation
ex <- exprs(gset)
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0)
if (LogC) { ex[which(ex <= 0)] <- NaN
exprs(gset) <- log2(ex) }
# assign samples to groups and set up design matrix
gs <- factor(sml)
groups <- make.names(c("young","old"))
levels(gs) <- groups
gset$group <- gs
design <- model.matrix(~group + 0, gset)
colnames(design) <- levels(gs)
fit <- lmFit(gset, design)  # fit linear model
# set up contrasts of interest and recalculate model coefficients
cts <- paste(groups[1], groups[2], sep="-")
cont.matrix <- makeContrasts(contrasts=cts, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
# compute statistics and table of top significant genes
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="fdr", sort.by="B", number=250)
tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","t","B","logFC","Gene.symbol","Gene.title"))
tT
library(GEOquery)
library(limma)
library(umap)
library(reticulate)
library(knitr)
library(homologene)
library(ggplot2)
library(dplyr)
gset <- getGEO("GSE4332", GSEMatrix =TRUE, AnnotGPL=TRUE)
if (length(gset) > 1) idx <- grep("GPL1261", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
# group membership for all samples
gsms <- "11111000"
sml <- strsplit(gsms, split="")[[1]]
# log2 transformation
ex <- exprs(gset)
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0)
if (LogC) { ex[which(ex <= 0)] <- NaN
exprs(gset) <- log2(ex) }
# assign samples to groups and set up design matrix
gs <- factor(sml)
groups <- make.names(c("young","old"))
levels(gs) <- groups
gset$group <- gs
design <- model.matrix(~group + 0, gset)
colnames(design) <- levels(gs)
fit <- lmFit(gset, design)  # fit linear model
# set up contrasts of interest and recalculate model coefficients
cts <- paste(groups[1], groups[2], sep="-")
cont.matrix <- makeContrasts(contrasts=cts, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
# compute statistics and table of top significant genes
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="fdr", sort.by="B", number=250)
tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","t","B","logFC","Gene.symbol","Gene.title"))
tT
GEO2R <- function(GSE_number,platform_code,group_binaries,outputs){
# load series and platform data from GEO
gset <- getGEO(GSE_number, GSEMatrix =TRUE, AnnotGPL=TRUE)
if (length(gset) > 1) idx <- grep(platform_code, attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
# group membership for all samples
gsms <- group_binaries
sml <- strsplit(gsms, split="")[[1]]
# filter out excluded samples (marked as "X")
sel <- which(sml != "X")
sml <- sml[sel]
gset <- gset[ ,sel]
# log2 transformation
ex <- exprs(gset)
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0)
if (LogC) { ex[which(ex <= 0)] <- NaN
exprs(gset) <- log2(ex) }
# assign samples to groups and set up design matrix
gs <- factor(sml)
groups <- make.names(c("young","old"))
levels(gs) <- groups
gset$group <- gs
design <- model.matrix(~group + 0, gset)
colnames(design) <- levels(gs)
fit <- lmFit(gset, design)  # fit linear model
# set up contrasts of interest and recalculate model coefficients
cts <- paste(groups[1], groups[2], sep="-")
cont.matrix <- makeContrasts(contrasts=cts, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
# compute statistics and table of top significant genes
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="fdr", sort.by="B", number=outputs)
tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","t","B","logFC","Gene.symbol","Gene.title"))
return(tT)
}
GEO2R_pFiltered <- function(GSE_number,platform_code,group_binaries,outputs){
tempTable <- GEO2R(GSE_number,platform_code,group_binaries,outputs)
filtTable <- tempTable[tempTable$adj.P.Val<0.05,]
dupTable <- filtTable[!duplicated(filtTable$Gene.symbol),]
return(dupTable)
}
#tT007 <- GEO2R_pFiltered("GSE58015","GPL571","000011111",1000)
tT009 <- GEO2R_pFiltered("GSE53890","GPL570","XXXXXXXX00000000000XX11111111111XXXXXXXXX",1000)
tT023 <- GEO2R_pFiltered("GSE38718","GPL570","0000000000000011111111",1000)
tT036 <- GEO2R_pFiltered("GSE28422","GPL570","00000000XXXXXXXXXXXXXXXXXXXXXXXX111111XXXXXXXXXXXXXXXXXX0000000XXXXXXXXXXXXXXXXXXXXXXX111111XXXXXXXXXXXXXXXXXX",1000)
tT037 <- GEO2R_pFiltered("GSE28392","GPL570","00000XXXXXXXXXXXXXXXX1111XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",1000)
tT038 <- GEO2R_pFiltered("GSE25941","GPL570","000000001111111111100000001111111111",1000)
tT044 <- GEO2R_pFiltered("GSE32719","GPL570","XXXXXXXXXXXXXX0000011111111",1000)
GEO2R_pFiltered <- function(GSE_number,platform_code,group_binaries,outputs){
tempTable <- GEO2R(GSE_number,platform_code,group_binaries,outputs)
filtTable <- tempTable[tempTable$adj.P.Val<0.1,]
dupTable <- filtTable[!duplicated(filtTable$Gene.symbol),]
return(dupTable)
}
#tT007 <- GEO2R_pFiltered("GSE58015","GPL571","000011111",1000)
tT009 <- GEO2R_pFiltered("GSE53890","GPL570","XXXXXXXX00000000000XX11111111111XXXXXXXXX",1000)
tT023 <- GEO2R_pFiltered("GSE38718","GPL570","0000000000000011111111",1000)
tT036 <- GEO2R_pFiltered("GSE28422","GPL570","00000000XXXXXXXXXXXXXXXXXXXXXXXX111111XXXXXXXXXXXXXXXXXX0000000XXXXXXXXXXXXXXXXXXXXXXX111111XXXXXXXXXXXXXXXXXX",1000)
tT037 <- GEO2R_pFiltered("GSE28392","GPL570","00000XXXXXXXXXXXXXXXX1111XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",1000)
tT038 <- GEO2R_pFiltered("GSE25941","GPL570","000000001111111111100000001111111111",1000)
tT044 <- GEO2R_pFiltered("GSE32719","GPL570","XXXXXXXXXXXXXX0000011111111",1000)
tT000M <- GEO2R_pFiltered("GSE71868","GPL6885","11110000",1000)
tT008M <- GEO2R_pFiltered("GSE50821","GPL1261","00000XXXX11111",1000)
tT011M <- GEO2R_pFiltered("GSE55162","GPL1261","11110000",100)
tT014M <- GEO2R_pFiltered("GSE46646","GPL1261","XXXXXX000111",1000)
tT020M <- GEO2R_pFiltered("GSE49543","GPL339","XXXXXXXXX00000000000000000111111111111111",1000)
tT043aM <- GEO2R_pFiltered("GSE25905","GPL6246","000XXXXXXXXX111XXX",1000)
tT043bM <- GEO2R_pFiltered("GSE25905","GPL6246","XXX000XXXXXXXXX111",1000)
tT057M <- GEO2R_pFiltered("GSE27686","GPL1261","111XXXXXX000XXXX",1000)
tT081M <- GEO2R_pFiltered("GSE19677","GPL6333","0000XXXXX1111XXXXX",1000)
tT082M <- GEO2R_pFiltered("GSE19677","GPL1261","XXXX00001X1XX1XXX1",1000)
tT133M <- GEO2R_pFiltered("GSE6323","GPL339","0000011111XXXXX",1000)
tT000M <- GEO2R_pFiltered("GSE71868","GPL6885","11110000",1000)
tT008M <- GEO2R_pFiltered("GSE50821","GPL1261","00000XXXX11111",1000)
tT011M <- GEO2R_pFiltered("GSE55162","GPL1261","11110000",100)
tT014M <- GEO2R_pFiltered("GSE46646","GPL1261","XXXXXX000111",1000)
tT020M <- GEO2R_pFiltered("GSE49543","GPL339","XXXXXXXXX00000000000000000111111111111111",1000)
tT043aM <- GEO2R_pFiltered("GSE25905","GPL6246","000XXXXXXXXX111XXX",1000)
tT043bM <- GEO2R_pFiltered("GSE25905","GPL6246","XXX000XXXXXXXXX111",1000)
tT057M <- GEO2R_pFiltered("GSE27686","GPL1261","111XXXXXX000XXXX",1000)
tT081M <- GEO2R_pFiltered("GSE19677","GPL6333","0000XXXXX1111XXXXX",1000)
tT082M <- GEO2R_pFiltered("GSE19677","GPL1261","XXXX00001X1XX1XXX1",1000)
tT133M <- GEO2R_pFiltered("GSE6323","GPL339","0000011111XXXXX",1000)
tT097M <- GEO2R_pFiltered("GSE11667","GPL1261","11110000XXXXXXXX",1000)
tT112M <- GEO2R_pFiltered("GSE8150","GPL1261","0000011111XXXXXXXXXX",1000)
tT113M <- GEO2R_pFiltered("GSE8146","GPL81","0000011111XXXXXXXXXX",1000)
tT058X <- GEO2R_pFiltered("GSE24515","GPL1355","000000111111",1000)
tT088X <- GEO2R_pFiltered("GSE9990","GPL341","XXXXXXXXXXXXXXXXXXXXXXXXXXX0000000001111111111111",1000)
tT092X <- GEO2R_pFiltered("GSE12502","GPL3979","111111000000",1000)
tT108aX <- GEO2R_pFiltered("GSE6718","GPL1355","1111111000000XXXXXXXXXXXXXXXXXXXXXXXXXX",1000)
tT108bX <- GEO2R_pFiltered("GSE6718","GPL1355","XXXXXXXXXXXXXXXXXXXXXX11000X00XXX11100X",1000)
tT132X <- GEO2R_pFiltered("GSE4270","GPL890","XXXXXXXXXXXXXXX00000000001111111111111",1000)
M2H <- function(mouse_tT){
MouseSymbols = mouse_tT[,7]
M2H_Symbols = mouse2human(MouseSymbols)
tTMerge = merge(mouse_tT,M2H_Symbols,by.x = "Gene.symbol",by.y = "mouseGene")
tTReordered = tTMerge[,c(2,3,4,5,6,7,9,8,1)]
return(tTReordered)
}
X2H <- function(animal_tT,TaxID){
AnimalSymbols = animal_tT[,7]
X2H_Symbols = homologene(AnimalSymbols, inTax = TaxID, outTax = 9606)
taxonomy = toString(TaxID)
tTMerge = merge(animal_tT,X2H_Symbols,by.x = "Gene.symbol",by.y = taxonomy)
tTReordered = tTMerge[,c(2,3,4,5,6,7,9,8,1)]
return(tTReordered)
}
tT000 <- M2H(tT000M)
tT008 <- M2H(tT008M)
tT011 <- M2H(tT011M)
tT014 <- M2H(tT014M)
tT020 <- M2H(tT020M)
tT043a <- M2H(tT043aM)
tT043b <- M2H(tT043bM)
tT057 <- M2H(tT057M)
tT081 <- M2H(tT081M)
tT082 <- M2H(tT082M)
tT097 <- M2H(tT097M)
tT112 <- M2H(tT112M)
tT113 <- M2H(tT113M)
tT133 <- M2H(tT133M)
tT058 <- X2H(tT058X,10116)
tT088 <- X2H(tT088X,10116)
tT092 <- X2H(tT092X,9615)
tT108a <- X2H(tT108aX,10116)
tT108b <- X2H(tT108bX,10116)
tT132 <- X2H(tT132X,10116)
#Human:
write.table(tT009, file="tT009.txt", row.names=F, sep="\t")
write.table(tT023, file="tT023.txt", row.names=F, sep="\t")
write.table(tT036, file="tT036.txt", row.names=F, sep="\t")
write.table(tT037, file="tT037.txt", row.names=F, sep="\t")
write.table(tT038, file="tT038.txt", row.names=F, sep="\t")
write.table(tT044, file="tT044.txt", row.names=F, sep="\t")
#Mouse:
write.table(tT000, file="tT000.txt", row.names=F, sep="\t")
write.table(tT008, file="tT008.txt", row.names=F, sep="\t")
write.table(tT011, file="tT011.txt", row.names=F, sep="\t")
write.table(tT014, file="tT014.txt", row.names=F, sep="\t")
write.table(tT020, file="tT020.txt", row.names=F, sep="\t")
write.table(tT043a, file="tT043a.txt", row.names=F, sep="\t")
write.table(tT043b, file="tT043b.txt", row.names=F, sep="\t")
write.table(tT057, file="tT057.txt", row.names=F, sep="\t")
write.table(tT081, file="tT081.txt", row.names=F, sep="\t")
write.table(tT082, file="tT082.txt", row.names=F, sep="\t")
write.table(tT097, file="tT097.txt", row.names=F, sep="\t")
write.table(tT112, file="tT112.txt", row.names=F, sep="\t")
write.table(tT113, file="tT113.txt", row.names=F, sep="\t")
write.table(tT133, file="tT133.txt", row.names=F, sep="\t")
#Other:
write.table(tT058, file="tT058.txt", row.names=F, sep="\t")
write.table(tT088, file="tT088.txt", row.names=F, sep="\t")
write.table(tT092, file="tT092.txt", row.names=F, sep="\t")
write.table(tT108a, file="tT108a.txt", row.names=F, sep="\t")
write.table(tT108b, file="tT108b.txt", row.names=F, sep="\t")
write.table(tT132, file="tT132.txt", row.names=F, sep="\t")
TotalCounts_byGene <- read.csv("Total_Counts.csv")
colnames(TotalCounts_byGene)<-c("Gene","Total_Count")
TotalCounts_numbers <- TotalCounts_byGene[,2]
TC2 <- TotalCounts_byGene[which(TotalCounts_byGene$Total_Count > 1 | TotalCounts_byGene$Total_Count < -1),]
YoungCounts_byGene <- read.csv("Young_Counts.csv")
YoungCounts_numbers <- YoungCounts_byGene[,2]
colnames(YoungCounts_byGene)<-c("Gene","Young_Count")
#adjust HERE to change histogram left limit (1 of 2):
YC2 <- YoungCounts_byGene[which(YoungCounts_byGene$Young_Count > 3),]
YC2L <- YC2[,2]
OldCounts_byGene <- read.csv("Old_Counts.csv")
OldCounts_numbers <- OldCounts_byGene[,2]
colnames(OldCounts_byGene)<-c("Gene","Old_Count")
#adjust HERE to change histogram left limit (2 of 2):
OC2 <- OldCounts_byGene[which(OldCounts_byGene$Old_Count > 3),]
OC2L <- OC2[,2]
YC2$Type <- "Young"
OC2$Type <- "Old"
colnames(YC2) <- c("Gene", "Count", "Type")
colnames(OC2) <- c("Gene", "Count", "Type")
HistoCounts <- rbind(YC2, OC2)
ggplot(HistoCounts, aes(Count, fill = Type)) +
geom_histogram(alpha = 0.5, color = "black", binwidth = 1, position = "identity") +
theme_minimal() +
scale_x_continuous(name = "Score", breaks = 3:15, minor_breaks = NULL) +
scale_y_continuous(name = "# DEGs Achieving Score", minor_breaks = 1:100)
ggplot
DS <- read.csv("221_Datasets.csv")
boxplot(DS$DEGs, horizontal=TRUE, main="Number of DEGs per Dataset")
text(x=fivenum(DS$DEGs), labels =fivenum(DS$DEGs), y=1.25)
#Note the middle value is median (50th percentile), not mean.
#Lower hinge is 25th percentile, upper is 75th percentile
DS_Progress = DS[which(DS$DEGs >0),]
length(DS_Progress$DEGs)
write.csv(DS_Progress,"DatasetsToDate.csv")
agg <- count(DS_Progress,Tissue,Organism)
ggplot(agg) +
geom_col(aes(x = Tissue, y = n, fill = Organism)) +
theme_minimal()+
theme(axis.text.x = element_text(angle = 70, hjust=1))+
scale_y_continuous(breaks = 1:10, minor_breaks = NULL)
DS_Progress %>%
group_by(Tissue) %>%
summarise(sum_DEGs = sum(DEGs), mean_DEGs = mean(DEGs))
DS_Progress %>%
group_by(Tissue) %>%
summarise(Sum_DEGs = sum(DEGs), mean_DEGs = mean(DEGs)) %>%
ggplot(aes(x=Tissue, y = Sum_DEGs, fill = Tissue)) +
geom_bar(stat="identity")+
theme_minimal()+
theme(axis.text.x = element_text(angle = 90, hjust=1))+
xlab("")+
guides(fill=FALSE)
OrthoList <- read.csv("ortholist_master.csv")
OrthoDEGs <- merge(TotalCounts_byGene,OrthoList,by.x = "Gene", by.y = "HGNC.Symbol", all.x = TRUE)
subset_by_counts <- OrthoDEGs[which(OrthoDEGs$Total_Count > 3 | OrthoDEGs$Total_Count < -3),]
DEG_Orthologs <- subset_by_counts[,c("Gene","Total_Count","Locus.ID","Common.Name","No..of.Programs","Ahringer.RNAi.Clone.Location")]
colnames(DEG_Orthologs) <- c("Human.Gene","DE.Score","Worm.Gene","Name","Programs","RNAi")
DEG_Orthologs
write.csv(DEG_Orthologs,"DEG_Orthologs.csv")
no.hum<-length(subset_by_counts$Gene)
cat("Number of human genes queried:",no.hum)
no.notworm <- sum(is.na(DEG_Orthologs$Worm.Gene))
cat("\nNumber without orthologs:",no.notworm)
no.worm <- no.hum - no.notworm
percent.worm <- no.worm/no.hum
cat("\nFraction with orthologs:",percent.worm)
pie_slices <- c(no.notworm,no.worm)
pie_labels <- c("No_Ortholog","Has_Ortholog")
pie(pie_slices,labels=pie_labels)
paste(DEG_Orthologs$Human.Gene, collapse = ", ")
paste(DEG_Orthologs$Name, collapse = ", ")
#Human:
write.table(tT009, file="tT009.txt", row.names=F, sep="\t")
write.table(tT023, file="tT023.txt", row.names=F, sep="\t")
write.table(tT036, file="tT036.txt", row.names=F, sep="\t")
write.table(tT037, file="tT037.txt", row.names=F, sep="\t")
write.table(tT038, file="tT038.txt", row.names=F, sep="\t")
write.table(tT044, file="tT044.txt", row.names=F, sep="\t")
#Mouse:
write.table(tT000, file="tT000.txt", row.names=F, sep="\t")
write.table(tT008, file="tT008.txt", row.names=F, sep="\t")
write.table(tT011, file="tT011.txt", row.names=F, sep="\t")
write.table(tT014, file="tT014.txt", row.names=F, sep="\t")
write.table(tT020, file="tT020.txt", row.names=F, sep="\t")
write.table(tT043a, file="tT043a.txt", row.names=F, sep="\t")
write.table(tT043b, file="tT043b.txt", row.names=F, sep="\t")
write.table(tT057, file="tT057.txt", row.names=F, sep="\t")
write.table(tT081, file="tT081.txt", row.names=F, sep="\t")
write.table(tT082, file="tT082.txt", row.names=F, sep="\t")
write.table(tT097, file="tT097.txt", row.names=F, sep="\t")
write.table(tT112, file="tT112.txt", row.names=F, sep="\t")
write.table(tT113, file="tT113.txt", row.names=F, sep="\t")
write.table(tT133, file="tT133.txt", row.names=F, sep="\t")
#Other:
write.table(tT058, file="tT058.txt", row.names=F, sep="\t")
write.table(tT088, file="tT088.txt", row.names=F, sep="\t")
write.table(tT092, file="tT092.txt", row.names=F, sep="\t")
write.table(tT108a, file="tT108a.txt", row.names=F, sep="\t")
write.table(tT108b, file="tT108b.txt", row.names=F, sep="\t")
write.table(tT132, file="tT132.txt", row.names=F, sep="\t")
TotalCounts_byGene <- read.csv("Total_Counts.csv")
colnames(TotalCounts_byGene)<-c("Gene","Total_Count")
TotalCounts_numbers <- TotalCounts_byGene[,2]
TC2 <- TotalCounts_byGene[which(TotalCounts_byGene$Total_Count > 1 | TotalCounts_byGene$Total_Count < -1),]
YoungCounts_byGene <- read.csv("Young_Counts.csv")
YoungCounts_numbers <- YoungCounts_byGene[,2]
colnames(YoungCounts_byGene)<-c("Gene","Young_Count")
#adjust HERE to change histogram left limit (1 of 2):
YC2 <- YoungCounts_byGene[which(YoungCounts_byGene$Young_Count > 3),]
YC2L <- YC2[,2]
OldCounts_byGene <- read.csv("Old_Counts.csv")
OldCounts_numbers <- OldCounts_byGene[,2]
colnames(OldCounts_byGene)<-c("Gene","Old_Count")
#adjust HERE to change histogram left limit (2 of 2):
OC2 <- OldCounts_byGene[which(OldCounts_byGene$Old_Count > 3),]
OC2L <- OC2[,2]
YC2$Type <- "Young"
OC2$Type <- "Old"
colnames(YC2) <- c("Gene", "Count", "Type")
colnames(OC2) <- c("Gene", "Count", "Type")
HistoCounts <- rbind(YC2, OC2)
ggplot(HistoCounts, aes(Count, fill = Type)) +
geom_histogram(alpha = 0.5, color = "black", binwidth = 1, position = "identity") +
theme_minimal() +
scale_x_continuous(name = "Score", breaks = 3:15, minor_breaks = NULL) +
scale_y_continuous(name = "# DEGs Achieving Score", minor_breaks = 1:100)
ggplot
DS_Progress %>%
group_by(Tissue) %>%
summarise(Sum_DEGs = sum(DEGs), mean_DEGs = mean(DEGs)) %>%
ggplot(aes(x=Tissue, y = Sum_DEGs, fill = Tissue)) +
geom_bar(stat="identity")+
theme_minimal()+
theme(axis.text.x = element_text(angle = 90, hjust=1))+
xlab("")+
guides(fill=FALSE)
DS_Progress %>%
group_by(Tissue) %>%
summarise(Sum_DEGs = sum(DEGs), mean_DEGs = mean(DEGs)) %>%
ggplot(aes(x=Tissue, y = DEGs, fill = Tissue)) +
geom_dotplot(binaxis = 'y',stackdir = 'center')+
theme_minimal()+
theme(axis.text.x = element_text(angle = 90, hjust=1))+
xlab("")+
guides(fill=FALSE)
View(DS_Progress)
DS_Progress %>%
group_by(Tissue) %>%
summarise(Sum_DEGs = sum(DEGs), mean_DEGs = mean(DEGs)) %>%
ggplot(aes(x=Tissue, y = DS_Progress$DEGs, fill = Tissue)) +
geom_dotplot(binaxis = 'y',stackdir = 'center')+
theme_minimal()+
theme(axis.text.x = element_text(angle = 90, hjust=1))+
xlab("")+
guides(fill=FALSE)
ggplot(DS_Progress, aes(x=Tissue,y=DEGs))+
geom_dotplot(binaxis = 'y',stackdir = 'center')
ggplot(DS_Progress, aes(x=Tissue,y=DEGs, color=Organism))+
geom_dotplot(binaxis = 'y',stackdir = 'center')
ggplot(DS_Progress, aes(x=Tissue,y=DEGs, fill=Organism))+
geom_dotplot(binaxis = 'y',stackdir = 'center')
ggplot(DS_Progress, aes(x=Tissue,y=DEGs, fill=Organism))+
geom_dotplot(binaxis = 'y',stackdir = 'center')+
theme_minimal()+
theme(axis.text.x = element_text(angle = 90, hjust=1))
ggplot(DS_Progress, aes(x=Tissue,y=DEGs, fill=Organism))+
geom_dotplot(binaxis = 'y',stackdir = 'center',dotsize=1.2)+
theme_minimal()+
theme(axis.text.x = element_text(angle = 90, hjust=1))
ggplot(DS_Progress, aes(x=Tissue,y=DEGs, fill=Organism))+
geom_dotplot(binaxis = 'y',stackdir = 'center',dotsize=1.5)+
theme_minimal()+
theme(axis.text.x = element_text(angle = 90, hjust=1))
ggplot(DS_Progress, aes(x=Tissue,y=DEGs, fill=Organism))+
geom_dotplot(binaxis = 'y',stackdir = 'center',dotsize=1.5)+
theme_minimal()+
theme(axis.text.x = element_text(angle = 90, hjust=1))+
coord_flip()
ggplot(DS_Progress, aes(x=Tissue,y=DEGs, fill=Organism))+
geom_dotplot(binaxis = 'y',stackdir = 'center',dotsize=1.5)+
theme_minimal()+
theme(axis.text.x = element_text(angle = 90, hjust=1))
ggplot(DS_Progress, aes(x=Tissue,y=DEGs, fill=Organism))+
geom_dotplot(binaxis = 'y',stackdir = 'center',dotsize=1.5)+
theme_minimal()+
theme(axis.text.x = element_text(angle = 90, hjust=1))+
coord_flip()
DS_Progress %>%
group_by(Tissue) %>%
summarise(Sum_DEGs = sum(DEGs), mean_DEGs = mean(DEGs)) %>%
ggplot(aes(x=Tissue, y = Sum_DEGs, fill = Tissue)) +
geom_bar(stat="identity")+
theme_minimal()+
theme(axis.text.x = element_text(angle = 90, hjust=1))+
xlab("")+
guides(fill=FALSE)+
coord_flip()
agg <- count(DS_Progress,Tissue,Organism)
ggplot(agg) +
geom_col(aes(x = Tissue, y = n, fill = Organism)) +
theme_minimal()+
theme(axis.text.x = element_text(angle = 70, hjust=1))+
scale_y_continuous(breaks = 1:10, minor_breaks = NULL)+
coord_flip()
GEO2R_pFiltered <- function(GSE_number,platform_code,group_binaries,outputs){
tempTable <- GEO2R(GSE_number,platform_code,group_binaries,outputs)
filtTable <- tempTable[tempTable$P.Value<0.0001,]
dupTable <- filtTable[!duplicated(filtTable$Gene.symbol),]
return(dupTable)
}
Execute functions on human datasets
(Note that a few data-sets have more than 1000 p<0.01)
```{r message = FALSE, warning=FALSE}
#tT007 <- GEO2R_pFiltered("GSE58015","GPL571","000011111",1000)
tT009 <- GEO2R_pFiltered("GSE53890","GPL570","XXXXXXXX00000000000XX11111111111XXXXXXXXX",1000)
tT023 <- GEO2R_pFiltered("GSE38718","GPL570","0000000000000011111111",1000)
tT036 <- GEO2R_pFiltered("GSE28422","GPL570","00000000XXXXXXXXXXXXXXXXXXXXXXXX111111XXXXXXXXXXXXXXXXXX0000000XXXXXXXXXXXXXXXXXXXXXXX111111XXXXXXXXXXXXXXXXXX",1000)
tT037 <- GEO2R_pFiltered("GSE28392","GPL570","00000XXXXXXXXXXXXXXXX1111XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",1000)
tT038 <- GEO2R_pFiltered("GSE25941","GPL570","000000001111111111100000001111111111",1000)
tT044 <- GEO2R_pFiltered("GSE32719","GPL570","XXXXXXXXXXXXXX0000011111111",1000)
```
Execute function on mouse datasets
```{r message = FALSE, warning=FALSE}
tT000M <- GEO2R_pFiltered("GSE71868","GPL6885","11110000",1000)
tT008M <- GEO2R_pFiltered("GSE50821","GPL1261","00000XXXX11111",1000)
tT011M <- GEO2R_pFiltered("GSE55162","GPL1261","11110000",100)
tT014M <- GEO2R_pFiltered("GSE46646","GPL1261","XXXXXX000111",1000)
tT020M <- GEO2R_pFiltered("GSE49543","GPL339","XXXXXXXXX00000000000000000111111111111111",1000)
```
View(tT011)
View(tT009)
